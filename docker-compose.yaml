version: '3.8'

services:
  web:
    build: .
    container_name: apache_php
    ports:
      - "8080:80"
    depends_on:
      - db
      - redis
    volumes:
      - ./php:/var/www/html
      - ./logs/apache:/var/log/apache2
    environment:
      - DB_HOST=db
      - DB_NAME=proyecto
      - DB_USER=proyecto
      - DB_PASS=proyecto
      - REDIS_HOST=redis
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: proyecto
      POSTGRES_PASSWORD: proyecto
      POSTGRES_DB: proyecto
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d  # Para scripts SQL iniciales
    ports:
      - "5432:5432"  # Para acceso externo si necesitas
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U proyecto"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Contenedor Redis para caché y sesiones
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Contenedor Nginx como proxy reverso (opcional)
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites:/etc/nginx/sites-available
      - ./ssl:/etc/nginx/ssl  # Para certificados SSL
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - web
    networks:
      - app-network
    restart: unless-stopped

  # Contenedor phpMyAdmin/Adminer para gestión de BD
  adminer:
    image: adminer:latest
    container_name: db_admin
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
    depends_on:
      - db
    networks:
      - app-network
    restart: unless-stopped

  # Contenedor para backup automático de BD
  backup:
    image: postgres:15
    container_name: postgres_backup
    depends_on:
      - db
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts
    environment:
      PGPASSWORD: proyecto
    networks:
      - app-network
    # Ejecuta backup diario a las 2 AM
    command: >
      sh -c "
      while true; do
        sleep 86400
        pg_dump -h db -U proyecto -d proyecto > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
        find /backups -name '*.sql' -mtime +7 -delete
      done
      "
    restart: unless-stopped

volumes:
  pgdata:
  redis_data:

networks:
  app-network:
    driver: bridge